# This workflow will configure AWS SSO Permissionset Assignments based on the teams.yml file.
# Dependencies : Python3 Boto3 pyyaml
# Note : Update AWS Account aliases manually in accoutns.auto.tfvars

name: Deploy Assignments config

on:
  workflow_dispatch:
  
env:
  #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        pip install boto3
    
    #- name: Init tfvars file and fetch Terraform state
    #  run: |
    #    export AWS_REGION=${{ secrets.AWS_REGION }}
    #    python scripts/createTeamsConfig.py > ./terraform/assignments.tfvars
    #    python scripts/getlatestTFState.py
    #    python scripts/createPSetMap.py > ./terraform/pSetsMap.auto.tfvars
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    #- name: Terraform Init
    #  run: |
    #    cd terraform
    #    terraform init
    
    #
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::502025729376:role/github-assume-role
        aws-region: ${{ secrets.AWS_REGION }}
        
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        export AWS_REGION=${{ secrets.AWS_REGION }}
        python scripts/createTeamsConfig.py > ./terraform/assignments.tfvars
        python scripts/getlatestTFState.py
        python scripts/createPSetMap.py > ./terraform/pSetsMap.auto.tfvars
        cd terraform
        terraform init
        terraform plan -var-file pSetsMap.auto.tfvars -var-file accounts.auto.tfvars -var-file assignments.tfvars
    
    # Apply plan for Terraform
    - name: Terraform Apply
      run: |
        #python scripts/createPermissionsConfig.py > ./terraform/permissionsets.tfvars
        #python scripts/getlatestTFState.py
        cd terraform
        terraform init
        terraform apply -auto-approve -var-file pSetsMap.auto.tfvars -var-file accounts.auto.tfvars -var-file assignments.tfvars -input=false
        
    #upload the terraform state to S3
    - name: upload the terraform state to S3
      run: |
        python scripts/uploadLatestTFState.py
        
